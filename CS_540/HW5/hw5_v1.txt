import numpy as np
from matplotlib import pyplot as plt
from csv import reader
import math


# Feel free to import other packages, if needed.
# As long as they are supported by CSL machines.


def get_dataset(filename):
    """
    TODO: implement this function.

    INPUT: 
        filename - a string representing the path to the csv file.

    RETURNS:
        An n by m+1 array, where n is # data points and m is # features.
        The labels y should be in the first column.
    """
    dataset = []
    

    file = open(filename)
    with open(filename,'r') as read_obj:
        csv_reader = reader(read_obj)
        next(csv_reader)
        for row in csv_reader:
            row = row[1:len(row)]
            temp = []
            for i in row:
                i = float(i)
                temp.append(i)
                
            dataset.append(temp)

    # data = dataset.to_numpy()
    data = np.array(dataset)
    return data
 


def print_stats(dataset, col):
    """
    TODO: implement this function.

    INPUT: 
        dataset - the body fat n by m+1 array
        col     - the index of feature to summarize on. 
                  For example, 1 refers to density.


    RETURNS:
        None
    """
    print(len(dataset))

    count = 0.0
    sum = 0.0
    sd = 0.0
    dev = 0
    n = len(dataset)
    for i in range(n):
        if (not (np.isnan(dataset[i][col]))):
            count+= 1
            sum = sum + dataset[i][col]
    mean = sum/count

   

    for i in range(n):
        if (not (np.isnan(dataset[i][col]))):
            dev = (dataset[i][col]-mean)**2 + dev

    temp = dev/(count-1)
    sd = math.sqrt(temp)

   
    f_m = "{:.2f}".format(mean)
    f_sd = "{:.2f}".format(sd)

    
    print(f_m)
    print(f_sd)


def regression(dataset, cols, betas):
    """
    TODO: implement this function.

    INPUT: 
        dataset - the body fat n by m+1 array
        cols    - a list of feature indices to learn.
                  For example, [1,8] refers to density and abdomen.
        betas   - a list of elements chosen from [beta0, beta1, ..., betam]

    RETURNS:
        mse of the regression model
    """
    mse = 0.0
    
    error = []
    SE = 0.0
    sum = 0.0
    for data in dataset:
        fx = betas[0]
        for c in range(len(cols)):
            fx+=data[cols[c]]*betas[c+1]
        fx = (fx - data[0])**2
        sum += fx
    mse = sum / len(dataset)

    return mse


def gradient_descent(dataset, cols, betas):
    """
    TODO: implement this function.

    INPUT: 
        dataset - the body fat n by m+1 array
        cols    - a list of feature indices to learn.
                  For example, [1,8] refers to density and abdomen.
        betas   - a list of elements chosen from [beta0, beta1, ..., betam]

    RETURNS:
        An 1D array of gradients
    """
    grads = None
    return grads


def iterate_gradient(dataset, cols, betas, T, eta):
    """
    TODO: implement this function.

    INPUT: 
        dataset - the body fat n by m+1 array
        cols    - a list of feature indices to learn.
                  For example, [1,8] refers to density and abdomen.
        betas   - a list of elements chosen from [beta0, beta1, ..., betam]
        T       - # iterations to run
        eta     - learning rate

    RETURNS:
        None
    """
    pass


def compute_betas(dataset, cols):
    """
    TODO: implement this function.

    INPUT: 
        dataset - the body fat n by m+1 array
        cols    - a list of feature indices to learn.
                  For example, [1,8] refers to density and abdomen.

    RETURNS:
        A tuple containing corresponding mse and several learned betas
    """
    betas = None
    mse = None
    return (mse, *betas)


def predict(dataset, cols, features):
    """
    TODO: implement this function.

    INPUT: 
        dataset - the body fat n by m+1 array
        cols    - a list of feature indices to learn.
                  For example, [1,8] refers to density and abdomen.
        features- a list of observed values

    RETURNS:
        The predicted body fat percentage value
    """
    result = None
    return result


def synthetic_datasets(betas, alphas, X, sigma):
    """
    TODO: implement this function.

    Input:
        betas  - parameters of the linear model
        alphas - parameters of the quadratic model
        X      - the input array (shape is guaranteed to be (n,1))
        sigma  - standard deviation of noise

    RETURNS:
        Two datasets of shape (n,2) - linear one first, followed by quadratic.
    """
    return None, None


def plot_mse():
    from sys import argv
    if len(argv) == 2 and argv[1] == 'csl':
        import matplotlib
        matplotlib.use('Agg')

    # TODO: Generate datasets and plot an MSE-sigma graph


if __name__ == '__main__':
    ### DO NOT CHANGE THIS SECTION ###
    plot_mse()
def test():
    filename = 'bodyfat.csv'
    dataset = get_dataset(filename)
    print(dataset)
    print(dataset.shape)
    print_stats(dataset, 1)
    print(regression(dataset,cols=[2,3], betas=[0,0,0]))
    print(regression(dataset,cols=[2,3,4], betas=[0,-1.1,-.2,3]))

test()